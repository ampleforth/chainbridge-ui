/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface XCAmpleControllerInterface extends ethers.utils.Interface {
  functions: {
    "addBridgeGateway(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "globalAmpleforthEpoch()": FunctionFragment;
    "globalAmpleforthEpochAndAMPLSupply()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "lastRebaseTimestampSec()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "nextGlobalAMPLSupply()": FunctionFragment;
    "nextGlobalAmpleforthEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebase()": FunctionFragment;
    "rebaseRelayer()": FunctionFragment;
    "removeBridgeGateway(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportRebase(uint256,uint256)": FunctionFragment;
    "setRebaseRelayer(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistedBridgeGateways(address)": FunctionFragment;
    "xcAmple()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBridgeGateway",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAmpleforthEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalAmpleforthEpochAndAMPLSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebaseTimestampSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextGlobalAMPLSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextGlobalAmpleforthEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebaseRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBridgeGateway",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportRebase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebaseRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedBridgeGateways",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "xcAmple", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addBridgeGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalAmpleforthEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAmpleforthEpochAndAMPLSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRebaseTimestampSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextGlobalAMPLSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextGlobalAmpleforthEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebaseRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBridgeGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebaseRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedBridgeGateways",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xcAmple", data: BytesLike): Result;

  events: {
    "GatewayBurn(address,address,uint256)": EventFragment;
    "GatewayMint(address,address,uint256)": EventFragment;
    "GatewayRebaseReported(address,uint256,uint256,uint256)": EventFragment;
    "GatewayWhitelistUpdated(address,bool)": EventFragment;
    "LogRebase(uint256,int256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GatewayBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GatewayMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GatewayRebaseReported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GatewayWhitelistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class XCAmpleController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: XCAmpleControllerInterface;

  functions: {
    addBridgeGateway(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burn(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    globalAmpleforthEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "globalAmpleforthEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalAmpleforthEpochAndAMPLSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "globalAmpleforthEpochAndAMPLSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initialize(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256)"(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastRebaseTimestampSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastRebaseTimestampSec()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nextGlobalAMPLSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextGlobalAMPLSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextGlobalAmpleforthEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextGlobalAmpleforthEpoch()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rebase(overrides?: Overrides): Promise<ContractTransaction>;

    "rebase()"(overrides?: Overrides): Promise<ContractTransaction>;

    rebaseRelayer(overrides?: CallOverrides): Promise<[string]>;

    "rebaseRelayer()"(overrides?: CallOverrides): Promise<[string]>;

    removeBridgeGateway(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reportRebase(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reportRebase(uint256,uint256)"(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRebaseRelayer(
      rebaseRelayer_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRebaseRelayer(address)"(
      rebaseRelayer_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelistedBridgeGateways(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whitelistedBridgeGateways(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    xcAmple(overrides?: CallOverrides): Promise<[string]>;

    "xcAmple()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addBridgeGateway(
    bridgeGateway: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addBridgeGateway(address)"(
    bridgeGateway: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burn(
    depositor: string,
    xcAmpleAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    depositor: string,
    xcAmpleAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  globalAmpleforthEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "globalAmpleforthEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  globalAmpleforthEpochAndAMPLSupply(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "globalAmpleforthEpochAndAMPLSupply()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  initialize(
    xcAmple_: string,
    globalAmpleforthEpoch_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256)"(
    xcAmple_: string,
    globalAmpleforthEpoch_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastRebaseTimestampSec(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRebaseTimestampSec()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    recipient: string,
    xcAmpleAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    recipient: string,
    xcAmpleAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nextGlobalAMPLSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "nextGlobalAMPLSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextGlobalAmpleforthEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "nextGlobalAmpleforthEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rebase(overrides?: Overrides): Promise<ContractTransaction>;

  "rebase()"(overrides?: Overrides): Promise<ContractTransaction>;

  rebaseRelayer(overrides?: CallOverrides): Promise<string>;

  "rebaseRelayer()"(overrides?: CallOverrides): Promise<string>;

  removeBridgeGateway(
    bridgeGateway: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeBridgeGateway(address)"(
    bridgeGateway: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reportRebase(
    nextGlobalAmpleforthEpoch_: BigNumberish,
    nextGlobalAMPLSupply_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reportRebase(uint256,uint256)"(
    nextGlobalAmpleforthEpoch_: BigNumberish,
    nextGlobalAMPLSupply_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRebaseRelayer(
    rebaseRelayer_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRebaseRelayer(address)"(
    rebaseRelayer_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelistedBridgeGateways(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "whitelistedBridgeGateways(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  xcAmple(overrides?: CallOverrides): Promise<string>;

  "xcAmple()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addBridgeGateway(
      bridgeGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    globalAmpleforthEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "globalAmpleforthEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalAmpleforthEpochAndAMPLSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "globalAmpleforthEpochAndAMPLSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initialize(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256)"(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastRebaseTimestampSec(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRebaseTimestampSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextGlobalAMPLSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGlobalAMPLSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGlobalAmpleforthEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGlobalAmpleforthEpoch()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rebase(overrides?: CallOverrides): Promise<void>;

    "rebase()"(overrides?: CallOverrides): Promise<void>;

    rebaseRelayer(overrides?: CallOverrides): Promise<string>;

    "rebaseRelayer()"(overrides?: CallOverrides): Promise<string>;

    removeBridgeGateway(
      bridgeGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reportRebase(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reportRebase(uint256,uint256)"(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebaseRelayer(
      rebaseRelayer_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRebaseRelayer(address)"(
      rebaseRelayer_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedBridgeGateways(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelistedBridgeGateways(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xcAmple(overrides?: CallOverrides): Promise<string>;

    "xcAmple()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    GatewayBurn(
      bridgeGateway: string | null,
      depositor: string | null,
      xcAmpleAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { bridgeGateway: string; depositor: string; xcAmpleAmount: BigNumber }
    >;

    GatewayMint(
      bridgeGateway: string | null,
      recipient: string | null,
      xcAmpleAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { bridgeGateway: string; recipient: string; xcAmpleAmount: BigNumber }
    >;

    GatewayRebaseReported(
      bridgeGateway: string | null,
      epoch: BigNumberish | null,
      globalAMPLSupply: null,
      timestampSec: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        bridgeGateway: string;
        epoch: BigNumber;
        globalAMPLSupply: BigNumber;
        timestampSec: BigNumber;
      }
    >;

    GatewayWhitelistUpdated(
      bridgeGateway: string | null,
      active: null
    ): TypedEventFilter<
      [string, boolean],
      { bridgeGateway: string; active: boolean }
    >;

    LogRebase(
      epoch: BigNumberish | null,
      requestedSupplyAdjustment: null,
      timestampSec: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        requestedSupplyAdjustment: BigNumber;
        timestampSec: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addBridgeGateway(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burn(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    globalAmpleforthEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "globalAmpleforthEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalAmpleforthEpochAndAMPLSupply(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "globalAmpleforthEpochAndAMPLSupply()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256)"(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastRebaseTimestampSec(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRebaseTimestampSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nextGlobalAMPLSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGlobalAMPLSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextGlobalAmpleforthEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "nextGlobalAmpleforthEpoch()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebase(overrides?: Overrides): Promise<BigNumber>;

    "rebase()"(overrides?: Overrides): Promise<BigNumber>;

    rebaseRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    "rebaseRelayer()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeBridgeGateway(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reportRebase(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reportRebase(uint256,uint256)"(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRebaseRelayer(
      rebaseRelayer_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRebaseRelayer(address)"(
      rebaseRelayer_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelistedBridgeGateways(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedBridgeGateways(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xcAmple(overrides?: CallOverrides): Promise<BigNumber>;

    "xcAmple()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addBridgeGateway(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burn(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      depositor: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    globalAmpleforthEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalAmpleforthEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalAmpleforthEpochAndAMPLSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalAmpleforthEpochAndAMPLSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256)"(
      xcAmple_: string,
      globalAmpleforthEpoch_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastRebaseTimestampSec(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRebaseTimestampSec()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      recipient: string,
      xcAmpleAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nextGlobalAMPLSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextGlobalAMPLSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextGlobalAmpleforthEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextGlobalAmpleforthEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebase(overrides?: Overrides): Promise<PopulatedTransaction>;

    "rebase()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rebaseRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rebaseRelayer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBridgeGateway(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeBridgeGateway(address)"(
      bridgeGateway: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reportRebase(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reportRebase(uint256,uint256)"(
      nextGlobalAmpleforthEpoch_: BigNumberish,
      nextGlobalAMPLSupply_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRebaseRelayer(
      rebaseRelayer_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRebaseRelayer(address)"(
      rebaseRelayer_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelistedBridgeGateways(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedBridgeGateways(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xcAmple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xcAmple()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
